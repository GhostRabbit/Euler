package se.fredsberg.euler.problem;

import se.fredsberg.euler.condition.Condition;
import se.fredsberg.euler.condition.ConditionOverFunction;
import se.fredsberg.euler.condition.MoreThenCondition;
import se.fredsberg.euler.function.DivisorCount;
import se.fredsberg.euler.function.Function;
import se.fredsberg.euler.sequence.TriangleNumberSequence;
import se.fredsberg.euler.util.SearchSequenceForMatch;

public class Problem012 implements Problem {

    /**
     * The sequence of triangle numbers is generated by adding the natural
     * numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
     * 28. The first ten terms would be:
     * 
     * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
     * 
     * Let us list the factors of the first seven triangle numbers:
     * 
     * <pre>
     * 1: 1
     * 3: 1,3
     * 6: 1,2,3,6
     * 10: 1,2,5,10
     * 15: 1,3,5,15
     * 21: 1,3,7,21
     * 28: 1,2,4,7,14,28
     * </pre>
     * 
     * We can see that 28 is the first triangle number to have over five
     * divisors.
     * 
     * What is the value of the first triangle number to have over five hundred
     * divisors?
     */

    @Override
    public long solve() {
        SearchSequenceForMatch searchTriangelSequenceFor500DivisorsMatch = new SearchSequenceForMatch(new TriangleNumberSequence(),
                atLeast500Divisors());
        return searchTriangelSequenceFor500DivisorsMatch.finds();
    }

    private Condition<Long> atLeast500Divisors() {
        Function<Long, Long> divisorCount = new DivisorCount();
        Condition<Long> atLeast500 = new MoreThenCondition(500);
        Condition<Long> atLeast500Divisors = new ConditionOverFunction<Long>(atLeast500, divisorCount);
        return atLeast500Divisors;
    }
}
