package se.fredberg.euler;

import java.util.List;

import se.fredberg.euler.util.PrimeFactors;
import se.fredberg.euler.util.TriangleNumberIterator;

public class E012 {

    /**
     * The sequence of triangle numbers is generated by adding the natural
     * numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
     * 28. The first ten terms would be:
     * 
     * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
     * 
     * Let us list the factors of the first seven triangle numbers:
     * 
     * <pre>
     * 1: 1 
     * 3: 1,3 
     * 6: 1,2,3,6 
     * 10: 1,2,5,10 
     * 15: 1,3,5,15 
     * 21: 1,3,7,21 
     * 28: 1,2,4,7,14,28
     * </pre>
     * 
     * We can see that 28 is the first triangle number to have over five
     * divisors.
     * 
     * What is the value of the first triangle number to have over five hundred
     * divisors?
     */

    public static void main(String[] args) {
      TriangleNumberIterator iterator = new TriangleNumberIterator();
        while (true) {
            int number = iterator.next();
            if (getDivisorCount(number) > 500) {
                System.out.println(number);
                break;
            }
        }
    } 

    static int getDivisorCount(int x) {
        List<Integer> factors = PrimeFactors.factorize(x);
        int count = 0;
        int totalCount = 1;
        int lastFactor = 0;
        for (int f : factors) {
            if (lastFactor == f) {
                count++;
            } else {
                totalCount *= (count + 1);
                lastFactor = f;
                count = 1;
            }
        }
        totalCount *= (count + 1);
        return totalCount;
    }

}
