package se.fredberg.euler;

import se.fredberg.euler.fibonnaci.FibonacciGenerator;
import se.fredberg.euler.matcher.EvenMatcher;
import se.fredberg.euler.matcher.LessThenMatcher;
import se.fredberg.euler.matcher.Matcher;
import se.fredberg.euler.util.ConditionedProcessor;
import se.fredberg.euler.util.Generator;
import se.fredberg.euler.util.Processor;
import se.fredberg.euler.util.Summerizer;

public class E002 {
    /*
     * Each new term in the Fibonacci sequence is generated by adding the
     * previous two terms. By starting with 1 and 2, the first 10 terms will be:
     * 
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     * 
     * By considering the terms in the Fibonacci sequence whose values do not
     * exceed four million, find the sum of the even-valued terms.
     */

    public static void main(String[] args) {
        Generator<Integer> generator = new FibonacciGenerator();
        Processor<Integer> processor = new ConditionedProcessor<Integer>(new Summerizer(), new EvenMatcher());
        Matcher<Integer> generatorLimit = new LessThenMatcher(4000000);
        long sum = getEvenSum(generator, processor, generatorLimit);
        System.out.println(sum);
    }

    private static long getEvenSum(Generator<Integer> generator, Processor<Integer> processor, Matcher<Integer> generatorLimit) {
        int next = generator.next();
        while (generatorLimit.matches(next)) {
            processor.process(next);
            next = generator.next();
        }
        return processor.getResult();
    }
}
