package se.fredberg.euler.problem;

import se.fredberg.euler.generator.FibonacciGenerator;
import se.fredberg.euler.generator.Generator;
import se.fredberg.euler.matcher.EvenMatcher;
import se.fredberg.euler.matcher.LessThenMatcher;
import se.fredberg.euler.matcher.Matcher;
import se.fredberg.euler.processor.ConditionedProcessor;
import se.fredberg.euler.processor.Processor;
import se.fredberg.euler.processor.SumProcessor;
import se.fredberg.euler.util.GeneratorLooper;

public class Problem002 implements Problem {
    
    /**
     * Each new term in the Fibonacci sequence is generated by adding the
     * previous two terms. By starting with 1 and 2, the first 10 terms will be:
     * 
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     * 
     * By considering the terms in the Fibonacci sequence whose values do not
     * exceed four million, find the sum of the even-valued terms.
     */

    @Override
    public long solve() {
        // TODO Auto-generated method stub
        Generator<Integer> fibonaccies = new FibonacciGenerator();
        Processor<Integer> sumOfEvens = new ConditionedProcessor<Integer>(new EvenMatcher(), new SumProcessor());
        Matcher<Integer> lessThen4million = new LessThenMatcher(4000000);
        new GeneratorLooper<Integer>(fibonaccies, lessThen4million, sumOfEvens).run();
        return sumOfEvens.getResult();
    }
}
